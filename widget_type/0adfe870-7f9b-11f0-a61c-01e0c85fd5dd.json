{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "lastest_values_table",
    "name" : "Lastest values table",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 5,
      "resources" : [ ],
      "templateHtml" : "",
      "templateCss" : ".tb-scroll-container {\r\n  position: relative;      /* stays within widget bounds */\r\n  overflow-y: auto;        /* vertical scroll */\r\n  overflow-x: hidden;\r\n  -webkit-overflow-scrolling: touch; /* smooth on touch devices */\r\n}\r\n\r\n.mat-table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\n.mat-cell {\r\n  font-family: 'Roboto', sans-serif; /* Roboto font */\r\n  font-size: 13px;                   /* Smaller font */\r\n  padding: 13px 13px;                /* More vertical padding = extra space top/bottom */\r\n  border-bottom: 1px solid #e0e0e0;\r\n}\r\n\r\n/*\r\n.mat-row:first-child .mat-cell {\r\n  border-top: 1px solid #e0e0e0;\r\n}\r\n*/\r\n\r\n.key-cell { \r\n  text-align: left;  \r\n  font-weight: normal; \r\n}\r\n\r\n.value-cell { \r\n  text-align: right; \r\n  font-weight: bold; \r\n}\r\n\r\n.mat-row:hover { \r\n  background-color: #f5f5f5; \r\n}\r\n\r\n.tb-search-container {\r\n  padding: 6px 5px 10px 0px;\r\n  background: transparent;\r\n  border-bottom: 1px solid #e0e0e0;\r\n  display: flex;               /* enable flexbox */\r\n  justify-content: flex-end;   /* push search to the right */\r\n}\r\n\r\n.tb-search {\r\n  width: 50%;                  /* half the container width */\r\n  max-width: 250px;            /* optional: prevent it from growing too big */\r\n  padding: 6px 10px;\r\n  font-size: 13px;\r\n  font-family: 'Roboto', sans-serif;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n}\r\n",
      "controllerScript" : "self.onInit = function () {\r\n  self.ctx.tables = [];\r\n\r\n  for (var i = 0; i < self.ctx.datasources.length; i++) {\r\n    var tbDatasource = self.ctx.datasources[i];\r\n\r\n    var datasourceId = 'tbDatasource' + i;\r\n    self.ctx.$container.append(\r\n      \"<div id='\" + datasourceId + \"' class='tbDatasource-container'></div>\"\r\n    );\r\n\r\n    var datasourceContainer = $('#' + datasourceId, self.ctx.$container);\r\n\r\n    // üîç Add search input\r\n    var searchId = 'search' + i;\r\n    datasourceContainer.append(\r\n      \"<div class='tb-search-container'>\" +\r\n        \"<input id='\" + searchId + \"' type='text' class='tb-search' placeholder='Search...'>\" +\r\n      \"</div>\"\r\n    );\r\n\r\n    var tableId = 'table' + i;\r\n    datasourceContainer.append(\r\n      \"<div class='tb-scroll-container'>\" +\r\n        \"<table id='\" + tableId + \"' class='mat-table full-width'><tbody></tbody></table>\" +\r\n      \"</div>\"\r\n    );\r\n\r\n    // Store table & search input\r\n    self.ctx.tables.push({\r\n      body: $('#' + tableId + ' tbody', self.ctx.$container),\r\n      rows: {}, \r\n      searchInput: $('#' + searchId, self.ctx.$container)\r\n    });\r\n\r\n    // üîç Hook up filtering\r\n    (function(tableObj) {\r\n      tableObj.searchInput.on('input', function() {\r\n        var term = $(this).val().toLowerCase();\r\n        $('tr', tableObj.body).each(function() {\r\n          var text = $(this).text().toLowerCase();\r\n          $(this).toggle(text.indexOf(term) > -1);\r\n        });\r\n      });\r\n    })(self.ctx.tables[i]);\r\n  }\r\n\r\n  self.onResize();\r\n};\r\n\r\n\r\nfunction hasMeaningfulValue(v) {\r\n  if (v === null || v === undefined) return false;\r\n  if (typeof v === 'number') return isFinite(v);       // keep 0\r\n  if (typeof v === 'boolean') return true;              // keep false/true\r\n  if (typeof v === 'string') {\r\n    var s = v.trim();\r\n    if (!s) return false;                               // \"\", \"   \"\r\n    if (s === '-' || s === '‚Äî') return false;           // common placeholders\r\n    if (s.toLowerCase() === 'null' || s.toLowerCase() === 'undefined') return false;\r\n    return true;\r\n  }\r\n  // objects/arrays: keep non-empty ones\r\n  try {\r\n    var s = JSON.stringify(v);\r\n    return s && s !== '{}' && s !== '[]';\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n}\r\n\r\n\r\nself.onResize = function () {\r\n  var widgetHeight = self.ctx.height || self.ctx.$container.height();\r\n  var count = Math.max(self.ctx.datasources.length, 1);\r\n  var perHeight = Math.floor(widgetHeight / count);\r\n\r\n  // Apply height to every scroll container\r\n  $('.tb-scroll-container', self.ctx.$container).css({\r\n    height: perHeight + 'px',\r\n    maxHeight: perHeight + 'px'\r\n  });\r\n};\r\n\r\n\r\nself.onDataUpdated = function () {\r\n  for (var i = 0; i < self.ctx.data.length; i++) {\r\n    var cellData = self.ctx.data[i];\r\n    if (!cellData || !cellData.data || !cellData.data.length) continue;\r\n\r\n    var tvPair = cellData.data[cellData.data.length - 1];\r\n    var raw = tvPair[1];\r\n\r\n    var dsIndex = (cellData.datasourceIndex != null) ? cellData.datasourceIndex : 0;\r\n    var key = cellData.dataKey.label || cellData.dataKey.name;\r\n    var table = self.ctx.tables[dsIndex];\r\n    if (!table) continue;\r\n\r\n    // If no value -> remove row if it exists, then skip\r\n    if (!hasMeaningfulValue(raw)) {\r\n      if (table.rows[key]) {\r\n        table.rows[key].closest('tr').remove();\r\n        delete table.rows[key];\r\n      }\r\n      continue;\r\n    }\r\n\r\n    // Format value if numeric, otherwise stringify\r\n    var txt;\r\n    if (typeof raw === 'number' && isFinite(raw)) {\r\n      var decimals = (cellData.dataKey.decimals != null) ? cellData.dataKey.decimals : self.ctx.decimals;\r\n      var units = cellData.dataKey.units || self.ctx.units;\r\n      txt = self.ctx.utils.formatValue(raw, decimals, units, true);\r\n    } else if (typeof raw === 'object') {\r\n      try { txt = JSON.stringify(raw); } catch (e) { txt = String(raw); }\r\n    } else {\r\n      txt = String(raw);\r\n    }\r\n\r\n    // Create row on first valid value\r\n    if (!table.rows[key]) {\r\n      var safeId = 'row_' + dsIndex + '_' + key.replace(/[^\\w-]/g, '_');\r\n      var $row = $(\r\n        \"<tr class='mat-row' id='\" + safeId + \"'>\" +\r\n          \"<td class='mat-cell key-cell'>\" + key + \"</td>\" +\r\n          \"<td class='mat-cell value-cell'></td>\" +\r\n        \"</tr>\"\r\n      );\r\n      table.body.append($row);\r\n      table.rows[key] = $row.find('.value-cell');\r\n    }\r\n\r\n    // Update value cell\r\n    table.rows[key].html(txt);\r\n  }\r\n};\r\n\r\n",
      "settingsForm" : [ ],
      "dataKeySettingsForm" : [ ],
      "hasBasicMode" : false,
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Cos\",\"color\":\"#4caf50\",\"settings\":{},\"_hash\":0.8416510464473642,\"funcBody\":\"return Math.round(1000*Math.cos(time/5000));\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin\",\"color\":\"#f44336\",\"settings\":{},\"_hash\":0.9656098086761837,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"}],\"alarmFilterConfig\":{\"statusList\":[\"ACTIVE\"]}}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Attributes card\",\"decimals\":null,\"useDashboardTimewindow\":true,\"displayTimewindow\":true,\"showTitleIcon\":false,\"titleTooltip\":\"\",\"dropShadow\":true,\"enableFullscreen\":false,\"widgetStyle\":{},\"widgetCss\":\"\",\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"pageSize\":1024,\"noDataDisplayMessage\":\"\"}"
    },
    "externalId" : null,
    "resources" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "0adfe870-7f9b-11f0-a61c-01e0c85fd5dd"
    },
    "scada" : false,
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}