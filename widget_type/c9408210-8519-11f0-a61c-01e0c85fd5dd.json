{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "control",
    "name" : "Control",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "rpc",
      "sizeX" : 9,
      "sizeY" : 6,
      "resources" : [ ],
      "templateHtml" : "<div class=\"custom-gen-widget\"\r\n     style=\"display: flex; flex-direction: column; height: 100%;\">\r\n\r\n    <div\r\n        style=\"display: flex; justify-content: center; gap: 8px; padding: 0px 0px 8px 0px; width: 100%;\">\r\n        <button mat-flat-button\r\n            style=\"flex: 1; pointer-events: none;\"\r\n            (click)=\"off()\"\r\n            [color]=\"selectedState === 'STOP' ? 'primary' : null\"\r\n            [ngStyle]=\"selectedState !== 'STOP' \r\n          ? {'background-color': '#fafafa', 'color': 'black'} \r\n          : {}\">\r\n            STOP\r\n        </button>\r\n\r\n        <button mat-flat-button\r\n            style=\"flex: 1; pointer-events: none;\"\r\n            (click)=\"man()\"\r\n            [color]=\"selectedState === 'MAN' ? 'primary' : null\"\r\n            [ngStyle]=\"selectedState !== 'MAN' \r\n          ? {'background-color': '#fafafa', 'color': 'black'} \r\n          : {}\">\r\n            MAN\r\n        </button>\r\n\r\n        <button mat-flat-button\r\n            style=\"flex: 1; pointer-events: none;\"\r\n            (click)=\"auto()\"\r\n            [color]=\"selectedState === 'AUTO' ? 'primary' : null\"\r\n            [ngStyle]=\"selectedState !== 'AUTO' \r\n          ? {'background-color': '#fafafa', 'color': 'black'} \r\n          : {}\">\r\n            AUTO\r\n        </button>\r\n\r\n        <button mat-flat-button\r\n            style=\"flex: 1; pointer-events: none;\"\r\n            (click)=\"test()\"\r\n            [color]=\"selectedState === 'TEST' ? 'primary' : null\"\r\n            [ngStyle]=\"selectedState !== 'TEST' \r\n          ? {'background-color': '#fafafa', 'color': 'black'} \r\n          : {}\">\r\n            TEST\r\n        </button>\r\n\r\n\r\n        <!--\r\n    <button mat-raised-button \r\n        style=\"background-color: #4CAF50; color: white; min-width: 40px; padding: 0; font-weight: bold;\"\r\n        (click)=\"i()\">I</button>\r\n    \r\n    <button mat-raised-button \r\n        style=\"background-color: #F44336; color: white; min-width: 40px; padding: 0; font-weight: bold;\"\r\n        (click)=\"o()\">O</button>\r\n    -->\r\n\r\n    </div>\r\n\r\n\r\n    <!-- Content area -->\r\n    <div\r\n        style=\"flex: 1; background-color: #eee; display: flex; flex-direction: column; padding: 12px; overflow: hidden;\">\r\n\r\n        <!-- Top row: main diagram -->\r\n        <div\r\n            style=\"flex: 1; display: flex; justify-content: space-evenly; align-items: center; flex-wrap: wrap;\">\r\n\r\n            <!-- Grid -->\r\n            <div\r\n                style=\"display: flex; flex-direction: column; align-items: center; color: #333;\">\r\n                <mat-icon\r\n                    [svgIcon]=\"connection1Closed ? 'mdi:transmission-tower' : 'mdi:transmission-tower'\"\r\n                    style=\"width: 42px; height: 42px; font-size: 42px;\">\r\n                </mat-icon>\r\n                <div style=\"margin-top: 8px;\">Mains</div>\r\n            </div>\r\n\r\n            <!-- Connection 1: Grid -> Plant -->\r\n            <div\r\n                style=\"display: flex; flex-direction: column; align-items: center; color: #333; position: relative;\">\r\n                <mat-icon\r\n                    [svgIcon]=\"statusBrakerStateMCB == 1 ? 'mdi:electric-switch-closed' : 'mdi:electric-switch'\"\r\n                    [ngStyle]=\"{ color: statusBrakerStateMCB == 1 ? 'green' : '#333' }\"\r\n                    style=\"width: 32px; height: 32px; font-size: 32px;\">\r\n                </mat-icon>\r\n                <!-- Absolutely positioned button -->\r\n                <button mat-raised-button\r\n                    style=\"position: absolute; top: 48px; background-color: #333333; color: white; min-width: 38px; padding: 0; font-weight: bold;\"\r\n                    (click)=\"switch1()\">I/O</button>\r\n            </div>\r\n\r\n            <!-- Plant -->\r\n            <div\r\n                style=\"display: flex; flex-direction: column; align-items: center; color: #333;\">\r\n                <mat-icon\r\n                    style=\"font-size: 42px; line-height: 1; width: auto; height: auto;\">factory</mat-icon>\r\n                <div style=\"margin-top: 8px;\">Carga</div>\r\n            </div>\r\n\r\n            <!-- Connection 2: Plant -> Generator -->\r\n            <div\r\n                style=\"display: flex; flex-direction: column; align-items: center; color: #333; position: relative;\">\r\n                <mat-icon\r\n                    [svgIcon]=\"statusBrakerStateGCB == 1 ? 'mdi:electric-switch-closed' : 'mdi:electric-switch'\"\r\n                    [ngStyle]=\"{ color: statusBrakerStateGCB == 1 ? 'green' : '#333' }\"\r\n                    style=\"width: 32px; height: 32px; font-size: 32px;\">\r\n                </mat-icon>\r\n                <!-- Absolutely positioned button -->\r\n                <button mat-raised-button\r\n                    style=\"position: absolute; top: 48px; background-color: #333333; color: white; min-width: 38px; padding: 0; font-weight: bold;\"\r\n                    (click)=\"switch2()\">I/O</button>\r\n            </div>\r\n\r\n            <!-- Generator -->\r\n            <div\r\n                style=\"display: flex; flex-direction: column; align-items: center; color: #333;\">\r\n                <mat-icon\r\n                    [svgIcon]=\"connection1Closed ? 'mdi:generator-portable' : 'mdi:generator-portable'\"\r\n                    style=\"width: 38px; height: 38px; font-size: 38px; line-height: 1;\">\r\n                </mat-icon>\r\n                <div style=\"margin-top: 8px;\">Generador\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n\r\n        <!-- Bottom row: control buttons -->\r\n        <div\r\n            style=\"display: flex; justify-content: flex-end; gap: 8px; padding-top: 8px;\">\r\n            <button mat-raised-button\r\n                style=\"background-color: #333333; color: white; min-width: 40px; padding: 0; font-weight: bold;\"\r\n                (click)=\"hornReset()\">\r\n                <mat-icon\r\n                    style=\"margin-left: 4px;\">notifications_off</mat-icon>\r\n            </button>\r\n\r\n            <button mat-raised-button\r\n                style=\"background-color: #333333; color: white; min-width: 40px; padding: 0; font-weight: bold;\"\r\n                (click)=\"faultReset()\">\r\n                <mat-icon\r\n                    style=\"margin-left: 4px;\">warning</mat-icon>\r\n            </button>\r\n\r\n            <button mat-raised-button\r\n                style=\"background-color: #4CAF50; color: white; min-width: 40px; padding: 0; font-weight: bold;\"\r\n                (click)=\"i()\">I</button>\r\n\r\n            <button mat-raised-button\r\n                style=\"background-color: #F44336; color: white; min-width: 40px; padding: 0; font-weight: bold;\"\r\n                (click)=\"o()\">O</button>\r\n        </div>\r\n\r\n    </div>\r\n</div>",
      "templateCss" : "#container {\r\n    overflow: auto;\r\n}\r\n\r\n.tbDatasource-container {\r\n    margin: 5px;\r\n    padding: 8px;\r\n}\r\n\r\n.tbDatasource-title {\r\n    font-size: 1.200rem;\r\n    font-weight: 500;\r\n    padding-bottom: 10px;\r\n}\r\n\r\n.tbDatasource-table {\r\n    width: 100%;\r\n    box-shadow: 0 0 10px #ccc;\r\n    border-collapse: collapse;\r\n    white-space: nowrap;\r\n    font-size: 1.000rem;\r\n    color: #757575;\r\n}\r\n\r\n.tbDatasource-table td {\r\n    position: relative;\r\n    border-top: 1px solid rgba(0, 0, 0, 0.12);\r\n    border-bottom: 1px solid rgba(0, 0, 0, 0.12);\r\n    padding: 0px 18px;\r\n    box-sizing: border-box;\r\n}",
      "controllerScript" : "self.onInit = function() {\r\n    \r\n    var targetId = self.ctx.defaultSubscription.targetEntityId;\r\n    var targetName  = self.ctx.defaultSubscription.targetEntityName;\r\n    \r\n    // --- Helper: Update statusControllerMode ---\r\n    function updateStatusControllerMode() {\r\n        if (!targetId) {\r\n            console.warn(\"No target entity ID available.\");\r\n            return;\r\n        }\r\n\r\n        self.ctx.attributeService.getEntityAttributes(\r\n            targetId,\r\n            'SHARED_SCOPE',\r\n            ['statusControllerMode']\r\n        ).subscribe(function(attrs) {\r\n            console.log(\"Attributes received for device:\", targetName, attrs);\r\n\r\n            if (attrs && attrs.length > 0) {\r\n                let value = attrs[0].value;\r\n                console.log(\"control_mode =\", value);\r\n                self.ctx.$scope.selectedState = value;\r\n            } else {\r\n                self.ctx.$scope.selectedState = null;\r\n            }\r\n            self.ctx.detectChanges();\r\n            console.log(\"Control Mode updated\");\r\n        });\r\n    }\r\n    \r\n    // --- Helper: Update statusControllerMode ---\r\n    function updateStatusBrakerStateGCB() {\r\n        if (!targetId) {\r\n            console.warn(\"No target entity ID available.\");\r\n            return;\r\n        }\r\n\r\n        self.ctx.attributeService.getEntityAttributes(\r\n            targetId,\r\n            'SHARED_SCOPE',\r\n            ['statusBrakerStateGCB']\r\n        ).subscribe(function(attrs) {\r\n            console.log(\"Attributes received for device:\", targetName, attrs);\r\n\r\n            if (attrs && attrs.length > 0) {\r\n                let value = attrs[0].value;\r\n                console.log(\"statusBrakerStateGCB =\", value);\r\n                self.ctx.$scope.statusBrakerStateGCB = value;\r\n            } else {\r\n                self.ctx.$scope.statusBrakerStateGCB = null;\r\n            }\r\n            self.ctx.detectChanges();\r\n            console.log(\"statusBrakerStateGCB updated\");\r\n        });\r\n    }\r\n    \r\n        // --- Helper: Update statusControllerMode ---\r\n    function updateStatusBrakerStateMCB() {\r\n        if (!targetId) {\r\n            console.warn(\"No target entity ID available.\");\r\n            return;\r\n        }\r\n\r\n        self.ctx.attributeService.getEntityAttributes(\r\n            targetId,\r\n            'SHARED_SCOPE',\r\n            ['statusBrakerStateMCB']\r\n        ).subscribe(function(attrs) {\r\n            console.log(\"Attributes received for device:\", targetName, attrs);\r\n\r\n            if (attrs && attrs.length > 0) {\r\n                let value = attrs[0].value;\r\n                console.log(\"statusBrakerStateMCB =\", value);\r\n                self.ctx.$scope.statusBrakerStateMCB = value;\r\n            } else {\r\n                self.ctx.$scope.statusBrakerStateMCB = null;\r\n            }\r\n            self.ctx.detectChanges();\r\n            console.log(\"statusBrakerStateGCB updated\");\r\n        });\r\n    }\r\n\r\n    // Call once immediately\r\n    updateStatusControllerMode();\r\n    updateStatusBrakerStateGCB();\r\n    updateStatusBrakerStateMCB();\r\n    \r\n    // --- Poll every 5 seconds (adjust as needed) ---\r\n    //self.updateInterval = setInterval(updateStatusControllerMode, 5000);\r\n    \r\n    let s = self.ctx.$scope;\r\n    let $injector = self.ctx.$scope.$injector;\r\n    let dialogs = $injector.get(self.ctx.servicesMap\r\n        .get('dialogs'));\r\n\r\n    // --- Helper: Confirm then send RPC ---\r\n    function confirmAndSend(title, message, method,\r\n        params, timeout, persistent) {\r\n        dialogs.confirm(title, message, 'Cancel',\r\n            'Send').subscribe(function(result) {\r\n            if (result) {\r\n                console.log(\"Accepted: \" +\r\n                    title);\r\n                self.ctx.controlApi\r\n                    .sendOneWayCommand(\r\n                        method,\r\n                        params,\r\n                        timeout,\r\n                        persistent\r\n                    ).subscribe(\r\n                        () => console.log(\r\n                            \"RPC sent:\", {\r\n                                method,\r\n                                params\r\n                            }),\r\n                        (err) => console.error(\r\n                            \"RPC error:\", err)\r\n                    );\r\n            } else {\r\n                console.log(\"Cancelled: \" +\r\n                    title);\r\n            }\r\n        });\r\n    }\r\n    \r\n    // --- Helper: Fetch a sequence from device attributes ---\r\n    function fetchSequenceFromAttribute(attrKey, callback) {\r\n        let targetId = self.ctx.defaultSubscription.targetEntityId;\r\n        let targetName = self.ctx.defaultSubscription.targetEntityName;\r\n    \r\n        if (!targetId) {\r\n            console.warn(\"No target entity ID available.\");\r\n            return;\r\n        }\r\n    \r\n        self.ctx.attributeService.getEntityAttributes(\r\n            targetId,\r\n            'SHARED_SCOPE',\r\n            [attrKey]\r\n        ).subscribe(function(attrs) {\r\n            console.log(\"Attributes received for device:\", targetName, attrs);\r\n    \r\n            if (attrs && attrs.length > 0) {\r\n                let value = attrs[0].value;\r\n                console.log(attrKey + \" =\", value);\r\n    \r\n                // Call the callback with the parsed sequence\r\n                if (callback) {\r\n                    callback(value);\r\n                }\r\n            } else {\r\n                console.warn(\"Attribute\", attrKey, \"not found.\");\r\n            }\r\n        });\r\n    }\r\n\r\n    \r\n    // --- Helper: Confirm then send a sequence of RPCs ---\r\n    function sendSequence(title, message, method, sequence, timeout, persistent) {\r\n        dialogs.confirm(title, message, 'Cancel', 'Send').subscribe(function(result) {\r\n            if (!result) {\r\n                console.log(\"Cancelled: \" + title);\r\n                return;\r\n            }\r\n    \r\n            console.log(\"Accepted: \" + title);\r\n    \r\n            // Recursive function to send commands one by one\r\n            function sendNext(index) {\r\n                if (index >= sequence.length) {\r\n                    console.log(\"✅ Sequence completed\");\r\n                    self.ctx.showSuccessToast(\"Secuencia enviada satisfactoriamente\");\r\n                    updateStatusControllerMode();\r\n                    return;\r\n                }\r\n    \r\n                let params = sequence[index];\r\n                console.log(\"➡️ Sending command\", index + 1, \":\", params);\r\n    \r\n                self.ctx.controlApi.sendTwoWayCommand(method, params, timeout, persistent).subscribe(\r\n                    function(response) {\r\n                        console.log(\"Response received:\", response);\r\n    \r\n                        // ✅ check inside response.params.data_response\r\n                        let dataResponse = response?.params?.data_response;\r\n                        if (dataResponse && dataResponse === params.data_request) {\r\n                            console.log(\"✅ Response matches, moving to next command\");\r\n                            sendNext(index + 1);\r\n                        } else {\r\n                            console.warn(\"⚠️ Response does not match expected params:\", {\r\n                                expected: params.data_request,\r\n                                got: dataResponse\r\n                            });\r\n                        }\r\n                    },\r\n                    function(err) {\r\n                        console.error(\"❌ RPC error at step \" + (index + 1), err);\r\n                    }\r\n                );\r\n            }\r\n    \r\n            // Start with the first command\r\n            sendNext(0);\r\n        });\r\n    }\r\n\r\n\r\n    // --- Button actions ---\r\n    s.switch1 = function() {\r\n        confirmAndSend(\r\n            \"Confirm I/O\",\r\n            \"Do you want to send I/O command?\",\r\n            \"modbus_request\", {\r\n                data_request: \"0310106F00030608F700000001AAAA\"\r\n            },\r\n            6000,\r\n            false\r\n        );\r\n    };\r\n\r\n    s.switch2 = function() {\r\n        confirmAndSend(\r\n            \"Confirm I/O\",\r\n            \"Do you want to send I/O command?\",\r\n            \"modbus_request\", {\r\n                data_request: \"0310106F00030608F700000001BBBB\"\r\n            },\r\n            6000,\r\n            false\r\n        );\r\n    };\r\n\r\n    s.i = function() {\r\n        fetchSequenceFromAttribute(\r\n            \"rpc_start\",\r\n            function(sequence) {\r\n                console.log(\"✅ Sequence fetched:\", sequence);\r\n            \r\n                let rpcMethod = \"modbus_request\";\r\n                let timeout = 6000;\r\n                let persistent = false;\r\n            \r\n                // Run the fetched sequence\r\n                sendSequence(\r\n                    \"Enviar señal de ENCENDIDO?\",\r\n                    \"This will send the RPC sequence from device attributes.\",\r\n                    rpcMethod,\r\n                    sequence,\r\n                    timeout,\r\n                    persistent\r\n                );\r\n            }\r\n        );\r\n    };\r\n    \r\n    /*\r\n    s.i = function() {\r\n        let rpcMethod = \"modbus_request\";\r\n        let timeout = 6000;\r\n        let persistent = false;\r\n        \r\n        let sequence = [\r\n            { data_request: \"010601F70001F804\" },\r\n            { data_request: \"010601F7000039C4\" }\r\n        ];\r\n        \r\n        sendSequence(\"Enviar secuencia de ENDENDIDO?\", \"This will send multiple RPCs in order.\", rpcMethod, sequence, timeout, persistent);\r\n    };\r\n    */\r\n\r\n    s.o = function() {\r\n        fetchSequenceFromAttribute(\r\n            \"rpc_stop\",\r\n            function(sequence) {\r\n                console.log(\"✅ Sequence fetched:\", sequence);\r\n            \r\n                let rpcMethod = \"modbus_request\";\r\n                let timeout = 6000;\r\n                let persistent = false;\r\n            \r\n                // Run the fetched sequence\r\n                sendSequence(\r\n                    \"Enviar señal de APAGADO?\",\r\n                    \"This will send the RPC sequence from device attributes.\",\r\n                    rpcMethod,\r\n                    sequence,\r\n                    timeout,\r\n                    persistent\r\n                );\r\n            }\r\n        );\r\n    };\r\n    \r\n    s.faultReset = function() {\r\n        fetchSequenceFromAttribute(\r\n            \"rpc_fault_reset\",\r\n            function(sequence) {\r\n                console.log(\"✅ Sequence fetched:\", sequence);\r\n            \r\n                let rpcMethod = \"modbus_request\";\r\n                let timeout = 6000;\r\n                let persistent = false;\r\n            \r\n                // Run the fetched sequence\r\n                sendSequence(\r\n                    \"Enviar señal de FAULT RESET?\",\r\n                    \"This will send the RPC sequence from device attributes.\",\r\n                    rpcMethod,\r\n                    sequence,\r\n                    timeout,\r\n                    persistent\r\n                );\r\n            }\r\n        );\r\n    };\r\n    \r\n    s.hornReset = function() {\r\n        fetchSequenceFromAttribute(\r\n            \"rpc_horn_reset\",\r\n            function(sequence) {\r\n                console.log(\"✅ Sequence fetched:\", sequence);\r\n            \r\n                let rpcMethod = \"modbus_request\";\r\n                let timeout = 6000;\r\n                let persistent = false;\r\n            \r\n                // Run the fetched sequence\r\n                sendSequence(\r\n                    \"Enviar señal de HORN RESET?\",\r\n                    \"This will send the RPC sequence from device attributes.\",\r\n                    rpcMethod,\r\n                    sequence,\r\n                    timeout,\r\n                    persistent\r\n                );\r\n            }\r\n        );\r\n    };\r\n    \r\n    s.prueba = function() {\r\n        fetchSequenceFromAttribute(\r\n            \"rpc_sequence\",\r\n            function(sequence) {\r\n                console.log(\"✅ Sequence fetched:\", sequence);\r\n            \r\n                let rpcMethod = \"modbus_request\";\r\n                let timeout = 6000;\r\n                let persistent = false;\r\n            \r\n                // Run the fetched sequence\r\n                sendSequence(\r\n                    \"Enviar secuencia obtenida de ATRIBUTOS?\",\r\n                    \"This will send the RPC sequence from device attributes.\",\r\n                    rpcMethod,\r\n                    sequence,\r\n                    timeout,\r\n                    persistent\r\n                );\r\n            }\r\n        );\r\n    };\r\n    \r\n};\r\n\r\n// ✅ Cleanup when widget is destroyed\r\nself.onDestroy = function() {\r\n    if (self.updateInterval) {\r\n        clearInterval(self.updateInterval);\r\n    }\r\n    console.log(\"widget destroyed\");\r\n};\r\n\r\n",
      "settingsForm" : [ ],
      "dataKeySettingsForm" : [ ],
      "hasBasicMode" : false,
      "basicModeDirective" : "",
      "defaultConfig" : "{\"showTitle\":false,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Attributes card\",\"decimals\":null,\"dropShadow\":true,\"enableFullscreen\":false,\"widgetStyle\":{},\"widgetCss\":\"\",\"pageSize\":1024,\"noDataDisplayMessage\":\"\",\"targetDevice\":{\"type\":\"device\"}}"
    },
    "externalId" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "c9408210-8519-11f0-a61c-01e0c85fd5dd"
    },
    "resources" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "c9408210-8519-11f0-a61c-01e0c85fd5dd"
    },
    "scada" : false,
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}